name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  pull-requests: write
  issues: write

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Validate version format
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "‚ùå Invalid version format: $VERSION"
          echo "Expected format: v1.2.3 or v1.2.3-beta"
          exit 1
        fi
        
        echo "‚úÖ Version format valid: $VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      id: version
        
    - name: Check for existing release
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        if gh release view "$VERSION" >/dev/null 2>&1; then
          echo "‚ùå Release $VERSION already exists"
          exit 1
        fi
        echo "‚úÖ Release $VERSION is new"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: validate-release
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.version.outputs.VERSION }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "RELEASE_NAME=KubePulse $VERSION" >> $GITHUB_OUTPUT
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Generate changelog
      id: changelog
      run: |
        echo "Generating changelog for ${{ steps.version.outputs.VERSION }}..."
        
        # Get previous tag
        PREV_TAG=$(git tag --sort=-version:refname | grep -v "${{ steps.version.outputs.VERSION }}" | head -n1)
        if [[ -z "$PREV_TAG" ]]; then
          RANGE="${{ steps.version.outputs.VERSION }}"
        else
          RANGE="$PREV_TAG..${{ steps.version.outputs.VERSION }}"
        fi
        
        # Generate changelog
        CHANGELOG=$(git log $RANGE --pretty=format:"- %s (%h)" --no-merges)
        
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: latest
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        release_name: ${{ steps.version.outputs.RELEASE_NAME }}
        body: |
          ## üöÄ KubePulse ${{ steps.version.outputs.VERSION }}
          
          ### üìã Changes in this release:
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ### üì¶ Installation:
          ```bash
          # Docker
          docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}
          
          # Binary (from releases)
          curl -LO https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/kubepulse-linux-amd64.tar.gz
          ```
          
          ### üîç Verification:
          - **Docker Image**: `ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}`
          - **Security Scan**: Passed ‚úÖ
          - **Performance Tests**: Passed ‚úÖ
          - **Integration Tests**: Passed ‚úÖ
          
          ---
          
          ü§ñ Generated with [Claude Code](https://claude.ai/code)
        draft: false
        prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}