name: Deploy & Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker-build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && github.ref_name || 'dev' }}
          COMMIT=${{ github.sha }}
          BUILD_DATE=${{ github.event.repository.updated_at }}
          
    - name: Generate artifact attestation
      if: github.event_name != 'pull_request'
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true
        
    - name: Output image
      id: image
      run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

  security-scan:
    name: Security Scan Container
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: read
      security-events: write
      
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.docker-build.outputs.image }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging
      url: https://kubepulse-staging.example.com
      
    steps:
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Image: ${{ needs.docker-build.outputs.image }}"
        echo "Digest: ${{ needs.docker-build.outputs.digest }}"
        
        # Placeholder for actual deployment commands
        # In a real scenario, this would:
        # - Update Kubernetes manifests
        # - Apply to staging cluster
        # - Run health checks
        # - Notify team
        
        echo "‚úÖ Staging deployment completed"
        
    - name: Run smoke tests
      run: |
        echo "üß™ Running smoke tests against staging..."
        
        # Placeholder for smoke tests
        # In a real scenario, this would:
        # - Test critical endpoints
        # - Verify database connectivity
        # - Check health endpoints
        # - Run basic functionality tests
        
        echo "‚úÖ Smoke tests passed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/')
    environment:
      name: production
      url: https://kubepulse.example.com
      
    steps:
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "Tag: ${{ github.ref_name }}"
        echo "Image: ${{ needs.docker-build.outputs.image }}"
        
        # Placeholder for production deployment
        # In a real scenario, this would:
        # - Blue/green deployment
        # - Database migrations
        # - Feature flag updates
        # - Monitoring alerts
        
        echo "‚úÖ Production deployment completed"
        
    - name: Post-deployment verification
      run: |
        echo "üîç Running post-deployment verification..."
        
        # Placeholder for verification
        # In a real scenario, this would:
        # - Health check verification
        # - Performance baseline check
        # - Critical path testing
        # - Rollback capability verification
        
        echo "‚úÖ Post-deployment verification passed"
        
    - name: Notify deployment
      run: |
        echo "üì¢ Notifying team of successful deployment..."
        echo "Version ${{ github.ref_name }} is now live in production"
        
        # Placeholder for notifications
        # In a real scenario, this would:
        # - Slack/Teams notifications
        # - Email alerts
        # - Update deployment dashboard
        # - Create changelog entry