name: Frontend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'

defaults:
  run:
    working-directory: frontend

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run type check
      run: npm run type-check
    
    - name: Run linter
      run: npm run lint
      continue-on-error: true  # Allow lint warnings for now
    
    - name: Run tests
      run: npm test -- --passWithNoTests
    
    - name: Generate test coverage
      if: matrix.node-version == '20.x'
      run: npm test -- --coverage --passWithNoTests
    
    - name: Upload coverage to Codecov
      if: matrix.node-version == '20.x'
      uses: codecov/codecov-action@v4
      with:
        directory: ./frontend/coverage
        flags: frontend
        name: codecov-frontend
        fail_ci_if_error: false
    
    - name: Build application
      run: npm run build
    
    - name: Upload build artifacts
      if: matrix.node-version == '20.x'
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 7

  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build production bundle
      run: npm run build
    
    - name: Analyze bundle size
      run: |
        echo "## Bundle Size Report 📦" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| File | Size | Gzipped |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|---------|" >> $GITHUB_STEP_SUMMARY
        
        # Find and analyze JS files
        for file in dist/assets/*.js; do
          if [ -f "$file" ]; then
            SIZE=$(du -h "$file" | cut -f1)
            GZIPPED=$(gzip -c "$file" | wc -c | awk '{printf "%.1fKB", $1/1024}')
            FILENAME=$(basename "$file")
            echo "| $FILENAME | $SIZE | $GZIPPED |" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        # Find and analyze CSS files
        for file in dist/assets/*.css; do
          if [ -f "$file" ]; then
            SIZE=$(du -h "$file" | cut -f1)
            GZIPPED=$(gzip -c "$file" | wc -c | awk '{printf "%.1fKB", $1/1024}')
            FILENAME=$(basename "$file")
            echo "| $FILENAME | $SIZE | $GZIPPED |" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Total Bundle Size" >> $GITHUB_STEP_SUMMARY
        TOTAL_SIZE=$(du -sh dist | cut -f1)
        echo "**Total:** $TOTAL_SIZE" >> $GITHUB_STEP_SUMMARY
    
    - name: Check bundle size limits
      run: |
        # Check if main bundle is under 500KB
        MAIN_BUNDLE=$(find dist/assets -name "*.js" -type f | head -1)
        if [ -f "$MAIN_BUNDLE" ]; then
          SIZE_KB=$(du -k "$MAIN_BUNDLE" | cut -f1)
          if [ $SIZE_KB -gt 500 ]; then
            echo "⚠️ Warning: Main bundle size ($SIZE_KB KB) exceeds 500KB limit"
            echo "Consider code splitting or lazy loading to reduce bundle size"
          else
            echo "✅ Main bundle size ($SIZE_KB KB) is within limits"
          fi
        fi

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Run audit-ci for detailed vulnerability scanning
      run: |
        npm install -g audit-ci
        audit-ci --moderate || echo "Vulnerabilities found but continuing"
      continue-on-error: true
    
    - name: Check for outdated dependencies
      run: |
        echo "## Outdated Dependencies Report 📊" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        npm outdated || true >> $GITHUB_STEP_SUMMARY

  lighthouse:
    name: Lighthouse Performance Check
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.13.x
        lhci autorun --collect.staticDistDir=./dist || echo "Lighthouse CI not configured, skipping..."
      continue-on-error: true