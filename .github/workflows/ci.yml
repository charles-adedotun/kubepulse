name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go Modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download Dependencies
      run: go mod download

    - name: Verify Dependencies
      run: go mod verify

    - name: Run Go Vet
      run: go vet ./...

    - name: Run Go Tests
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Check Test Coverage
      run: |
        total_coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total test coverage: ${total_coverage}%"
        
        # Set minimum coverage threshold
        min_coverage=30
        if (( $(echo "$total_coverage < $min_coverage" | bc -l) )); then
          echo "❌ Test coverage ${total_coverage}% is below minimum ${min_coverage}%"
          exit 1
        else
          echo "✅ Test coverage ${total_coverage}% meets minimum ${min_coverage}%"
        fi

    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: go-coverage-report
        path: |
          coverage.out
          coverage.html
        retention-days: 7

    - name: Run Benchmarks
      run: go test -bench=. -benchmem ./...

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint

    - name: Run TypeScript Check
      working-directory: ./frontend
      run: npm run type-check

    - name: Run Frontend Tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false

    - name: Build Frontend
      working-directory: ./frontend
      run: npm run build

    - name: Upload Frontend Coverage
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage-report
        path: frontend/coverage/
        retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec-results.sarif ./...'
        
    - name: Upload SARIF Results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: gosec-results.sarif

    - name: Run Nancy Vulnerability Scanner
      run: |
        go install github.com/sonatypecommunity/nancy@latest
        go list -json -deps ./... | nancy sleuth

    - name: Frontend Security Audit
      working-directory: ./frontend
      run: |
        npm audit --audit-level=moderate
        npx audit-ci --moderate

  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

    - name: Check Go Formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "❌ Go code is not properly formatted:"
          gofmt -s -l .
          exit 1
        else
          echo "✅ Go code is properly formatted"
        fi

    - name: Check Go Mod Tidy
      run: |
        go mod tidy
        if [ -n "$(git status --porcelain go.mod go.sum)" ]; then
          echo "❌ go.mod or go.sum is not tidy"
          git diff go.mod go.sum
          exit 1
        else
          echo "✅ go.mod and go.sum are tidy"
        fi

  build-and-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan, lint-and-format]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Build Frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run build

    - name: Build Go Binary
      run: |
        CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o bin/kubepulse ./cmd/kubepulse

    - name: Build Docker Image
      run: |
        docker build -t kubepulse:${{ github.sha }} .
        docker tag kubepulse:${{ github.sha }} kubepulse:latest

    - name: Test Docker Image
      run: |
        docker run --rm kubepulse:latest --version

    - name: Upload Binary Artifact
      uses: actions/upload-artifact@v4
      with:
        name: kubepulse-binary
        path: bin/kubepulse
        retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-package
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Kind Kubernetes Cluster
      uses: helm/kind-action@v1.8.0
      with:
        cluster_name: kubepulse-test
        config: test/manifests/kind-config.yaml

    - name: Download Binary Artifact
      uses: actions/download-artifact@v4
      with:
        name: kubepulse-binary
        path: bin/

    - name: Make Binary Executable
      run: chmod +x bin/kubepulse

    - name: Run Integration Tests
      run: |
        export KUBECONFIG=$HOME/.kube/config
        go test -v -tags=integration ./test/integration/...

    - name: Test Kubernetes Manifests
      run: |
        kubectl apply --dry-run=client -f test/manifests/
        kubectl apply -f test/manifests/
        kubectl get pods -A

    - name: Cleanup
      if: always()
      run: |
        kubectl delete -f test/manifests/ || true
        kind delete cluster --name kubepulse-test || true

  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Baseline Benchmarks (main branch)
      run: |
        git fetch origin main
        git checkout origin/main
        go test -bench=. -benchmem -count=5 ./... > baseline_bench.txt

    - name: Run Current Benchmarks (PR branch)
      run: |
        git checkout ${{ github.head_ref }}
        go test -bench=. -benchmem -count=5 ./... > current_bench.txt

    - name: Install benchcmp
      run: go install golang.org/x/tools/cmd/benchcmp@latest

    - name: Compare Benchmarks
      run: |
        benchcmp baseline_bench.txt current_bench.txt > benchmark_comparison.txt || true
        echo "## 📊 Performance Benchmark Comparison" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat benchmark_comparison.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Upload Benchmark Results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-comparison
        path: |
          baseline_bench.txt
          current_bench.txt
          benchmark_comparison.txt
        retention-days: 7

  ai-quality-check:
    name: AI Quality Assessment
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Download Coverage Reports
      uses: actions/download-artifact@v4
      with:
        name: go-coverage-report
        path: coverage/

    - name: AI Code Quality Analysis
      uses: anthropics/claude-code-action@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
        model: claude-3-5-sonnet-20241022
        prompt: |
          Analyze the code quality of this KubePulse pull request focusing on:
          
          1. **Go Code Quality**: Error handling, concurrency safety, best practices
          2. **Testing Coverage**: Adequacy of tests for new functionality
          3. **Performance Impact**: Potential performance implications
          4. **Security Considerations**: Any security concerns or improvements
          5. **Kubernetes Integration**: Proper K8s API usage and monitoring patterns
          
          Provide a concise quality assessment with specific recommendations.

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan, lint-and-format, build-and-package, integration-tests]
    if: always()
    
    steps:
    - name: Generate CI Summary
      run: |
        echo "## 🚀 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Job Status" >> $GITHUB_STEP_SUMMARY
        echo "- Backend Tests: ${{ needs.test-backend.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend Tests: ${{ needs.test-frontend.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Lint and Format: ${{ needs.lint-and-format.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Build and Package: ${{ needs.build-and-package.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.test-backend.result }}" == "success" && 
              "${{ needs.test-frontend.result }}" == "success" && 
              "${{ needs.security-scan.result }}" == "success" && 
              "${{ needs.lint-and-format.result }}" == "success" && 
              "${{ needs.build-and-package.result }}" == "success" && 
              "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "✅ **All CI checks passed!** Ready for AI review and merge consideration." >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Some CI checks failed.** Please review and fix issues before merging." >> $GITHUB_STEP_SUMMARY
        fi