name: Minimal CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Working Packages
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true
    
    - name: Test working packages
      run: |
        # Test packages that currently build and have tests (Phase 3: Expanded Coverage)
        echo "Testing working packages..."
        echo "Phase 1 packages:"
        go test -v ./pkg/core/...
        go test -v ./pkg/plugins/...
        go test -v ./pkg/k8s/...
        go test -v ./pkg/health/...
        go test -v ./pkg/alerts/...
        go test -v ./pkg/ml/...
        go test -v ./pkg/slo/...
        echo "Phase 3 additional packages:"
        go test -v ./pkg/ai/...
        go test -v ./pkg/api/...
        go test -v ./pkg/storage/...
        go test -v ./pkg/web/...
        echo "Integration tests:"
        go test -v ./test/integration/...
        
    - name: Basic lint check
      run: |
        # Basic gofmt check
        if [ -n "$(gofmt -l .)" ]; then
          echo "The following files need gofmt:"
          gofmt -l .
          exit 1
        fi
        echo "‚úÖ All files are properly formatted"
        
    - name: Go vet check
      run: |
        # Vet packages that build (Phase 3: Expanded Coverage)
        echo "Phase 1 packages:"
        go vet ./pkg/core/...
        go vet ./pkg/plugins/...
        go vet ./pkg/k8s/...
        go vet ./pkg/health/...
        go vet ./pkg/alerts/...
        go vet ./pkg/ml/...
        go vet ./pkg/slo/...
        echo "Phase 3 additional packages:"
        go vet ./pkg/ai/...
        go vet ./pkg/api/...
        go vet ./pkg/storage/...
        go vet ./pkg/web/...
        echo "‚úÖ Go vet passed for all packages"

  claude-review:
    name: Claude Code Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: test
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Run Claude Code Review
      id: claude
      run: |
        ./.github/scripts/claude-review.sh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Comment Claude Review
      uses: actions/github-script@v7
      if: steps.claude.outputs.CLAUDE_REVIEW
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `${{ steps.claude.outputs.CLAUDE_REVIEW }}`
          })

  decision-matrix:
    name: PR Decision Matrix
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [test, claude-review]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
        
    - name: Determine CI Status
      id: ci-status
      run: |
        if [[ "${{ needs.test.result }}" == "success" ]]; then
          echo "CI_STATUS=success" >> $GITHUB_OUTPUT
        elif [[ "${{ needs.test.result }}" == "failure" ]]; then
          echo "CI_STATUS=failure" >> $GITHUB_OUTPUT
        else
          echo "CI_STATUS=warning" >> $GITHUB_OUTPUT
        fi
        
    - name: Run Decision Matrix
      id: decision
      run: |
        ./.github/scripts/pr-decision-matrix.sh "${{ steps.ci-status.outputs.CI_STATUS }}" "${{ needs.claude-review.outputs.REVIEW_DECISION }}"
        
    - name: Apply Decision
      uses: actions/github-script@v7
      with:
        script: |
          const decision = '${{ steps.decision.outputs.DECISION }}';
          const autoMerge = '${{ steps.decision.outputs.AUTO_MERGE }}' === 'true';
          const blockMerge = '${{ steps.decision.outputs.BLOCK_MERGE }}' === 'true';
          
          // Add decision comment
          const decisionComment = `## üéØ PR Decision Matrix Result: \`${decision.toUpperCase()}\`
          
          **Analysis:**
          - CI Status: ${{ steps.ci-status.outputs.CI_STATUS }}
          - Claude Review: ${{ needs.claude-review.outputs.REVIEW_DECISION }}
          - Auto Merge: ${autoMerge ? '‚úÖ' : '‚ùå'}
          - Manual Review Required: ${{ steps.decision.outputs.MANUAL_REVIEW === 'true' ? '‚úÖ' : '‚ùå' }}
          - Merge Blocked: ${blockMerge ? '‚ö†Ô∏è' : '‚úÖ'}
          
          ${autoMerge ? 'üöÄ **This PR will be auto-merged**' : ''}
          ${blockMerge ? 'üö´ **This PR requires fixes before merging**' : ''}
          `;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: decisionComment
          });
          
          // Auto-merge if decision allows it
          if (autoMerge) {
            console.log('üöÄ Auto-merging PR...');
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                commit_title: 'Auto-merge: Passed all checks and Claude review',
                merge_method: 'squash'
              });
              console.log('‚úÖ PR auto-merged successfully');
            } catch (error) {
              console.log('‚ùå Auto-merge failed:', error.message);
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '‚ö†Ô∏è Auto-merge was approved but failed. Manual merge required.'
              });
            }
          }