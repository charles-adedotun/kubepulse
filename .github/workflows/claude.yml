name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # Optional: Allow Claude to run specific commands
          # allowed_tools: "Bash(npm install),Bash(npm run build),Bash(npm run test:*),Bash(npm run lint:*)"
          
          # KubePulse-specific instructions for Claude
          custom_instructions: |
            You are assisting with KubePulse, an intelligent Kubernetes health monitoring tool with ML-powered anomaly detection.
            
            ## Project Context
            - **Tech Stack**: Go backend, React/TypeScript frontend, Kubernetes integration
            - **Key Components**: AI/ML anomaly detection, health checks, monitoring engine, web dashboard
            - **Testing Strategy**: Progressive test coverage improvement, comprehensive unit/integration tests
            
            ## Your Expertise Areas
            1. **Go Development**: Best practices, error handling, concurrency, Kubernetes client-go usage
            2. **React/TypeScript**: Component architecture, hooks, testing, real-time data visualization
            3. **Kubernetes**: Monitoring patterns, RBAC, API integration, resource optimization
            4. **AI/ML**: Anomaly detection algorithms, statistical analysis, performance optimization
            5. **Testing**: Unit tests, integration tests, coverage improvement strategies
            
            ## Response Guidelines
            - Provide specific, actionable advice for KubePulse development
            - Include code examples when helpful
            - Consider monitoring-specific challenges and Kubernetes scalability
            - Suggest appropriate testing approaches
            - Keep security and performance implications in mind
            
            Focus on practical solutions for Kubernetes monitoring challenges.
          
          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test

