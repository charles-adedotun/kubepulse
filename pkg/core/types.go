package core

import (
	"context"
	"time"

	"k8s.io/client-go/kubernetes"
)

// HealthStatus represents the health state of a component
type HealthStatus string

const (
	HealthStatusHealthy   HealthStatus = "healthy"
	HealthStatusDegraded  HealthStatus = "degraded"
	HealthStatusUnhealthy HealthStatus = "unhealthy"
	HealthStatusUnknown   HealthStatus = "unknown"
)

// CheckResult represents the result of a health check
type CheckResult struct {
	Name        string                 `json:"name"`
	Status      HealthStatus           `json:"status"`
	Message     string                 `json:"message"`
	Details     map[string]interface{} `json:"details,omitempty"`
	Timestamp   time.Time              `json:"timestamp"`
	Duration    time.Duration          `json:"duration"`
	Error       error                  `json:"error,omitempty"`
	Metrics     []Metric               `json:"metrics,omitempty"`
	Confidence  float64                `json:"confidence"`
	Predictions []Prediction           `json:"predictions,omitempty"`
}

// HealthCheck defines the interface for all health checks
type HealthCheck interface {
	// Name returns the unique name of the health check
	Name() string

	// Description returns a human-readable description
	Description() string

	// Check performs the health check
	Check(ctx context.Context, client kubernetes.Interface) (CheckResult, error)

	// Configure sets up the health check with provided configuration
	Configure(config map[string]interface{}) error

	// Interval returns how often this check should run
	Interval() time.Duration

	// Criticality returns the importance level of this check
	Criticality() Criticality
}

// Criticality represents the importance of a health check
type Criticality string

const (
	CriticalityCritical Criticality = "critical"
	CriticalityHigh     Criticality = "high"
	CriticalityMedium   Criticality = "medium"
	CriticalityLow      Criticality = "low"
)

// Metric represents a metric collected during health check
type Metric struct {
	Name      string                 `json:"name"`
	Value     float64                `json:"value"`
	Unit      string                 `json:"unit"`
	Labels    map[string]string      `json:"labels,omitempty"`
	Timestamp time.Time              `json:"timestamp"`
	Type      MetricType             `json:"type"`
	Metadata  map[string]interface{} `json:"metadata,omitempty"`
}

// MetricType defines the type of metric
type MetricType string

const (
	MetricTypeGauge     MetricType = "gauge"
	MetricTypeCounter   MetricType = "counter"
	MetricTypeHistogram MetricType = "histogram"
	MetricTypeSummary   MetricType = "summary"
)

// Prediction represents a predicted future state
type Prediction struct {
	Timestamp   time.Time    `json:"timestamp"`
	Status      HealthStatus `json:"status"`
	Probability float64      `json:"probability"`
	Reason      string       `json:"reason"`
}

// Alert represents an alert generated by the system
type Alert struct {
	ID          string                 `json:"id"`
	Name        string                 `json:"name"`
	Severity    AlertSeverity          `json:"severity"`
	Message     string                 `json:"message"`
	Details     map[string]interface{} `json:"details,omitempty"`
	Source      string                 `json:"source"`
	Timestamp   time.Time              `json:"timestamp"`
	Fingerprint string                 `json:"fingerprint"`
	Labels      map[string]string      `json:"labels,omitempty"`
	Status      AlertStatus            `json:"status"`
}

// AlertSeverity defines the severity levels for alerts
type AlertSeverity string

const (
	AlertSeverityCritical AlertSeverity = "critical"
	AlertSeverityWarning  AlertSeverity = "warning"
	AlertSeverityInfo     AlertSeverity = "info"
)

// AlertStatus represents the current status of an alert
type AlertStatus string

const (
	AlertStatusFiring   AlertStatus = "firing"
	AlertStatusResolved AlertStatus = "resolved"
	AlertStatusSilenced AlertStatus = "silenced"
)

// SLO represents a Service Level Objective
type SLO struct {
	Name         string        `json:"name"`
	Description  string        `json:"description"`
	SLI          string        `json:"sli"`
	Target       float64       `json:"target"`
	Window       time.Duration `json:"window"`
	BudgetPolicy []BudgetRule  `json:"budget_policy"`
}

// BudgetRule defines actions based on error budget consumption
type BudgetRule struct {
	Threshold float64 `json:"threshold"` // Percentage of budget consumed
	Action    string  `json:"action"`    // notify, alert, page
}

// ClusterHealth represents the overall health of a cluster
type ClusterHealth struct {
	ClusterName string                `json:"cluster_name"`
	Status      HealthStatus          `json:"status"`
	Score       HealthScore           `json:"score"`
	Checks      []CheckResult         `json:"checks"`
	Timestamp   time.Time             `json:"timestamp"`
	Metrics     map[string][]Metric   `json:"metrics"`
	SLOs        map[string]*SLOStatus `json:"slos,omitempty"`
	Alerts      []Alert               `json:"alerts,omitempty"`
}

// HealthScore represents an intelligent health score
type HealthScore struct {
	Raw        float64 `json:"raw"`        // 0-100 raw score
	Weighted   float64 `json:"weighted"`   // Criticality-weighted score
	Trend      string  `json:"trend"`      // improving/stable/degrading
	Confidence float64 `json:"confidence"` // ML confidence level
	Forecast   string  `json:"forecast"`   // predicted state in 24h
}

// SLOStatus represents the current status of an SLO
type SLOStatus struct {
	SLO           SLO     `json:"slo"`
	CurrentValue  float64 `json:"current_value"`
	ErrorBudget   float64 `json:"error_budget"`
	BurnRate      float64 `json:"burn_rate"`
	IsViolated    bool    `json:"is_violated"`
	TimeToExhaust string  `json:"time_to_exhaust,omitempty"`
}
